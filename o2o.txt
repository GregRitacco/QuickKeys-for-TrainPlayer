** o2o - ops 2 ops Workevent Switching - Version 2
Let version = 20220105

Let occupiedCarCodes = E,ES,ED,EE,ET,EP,NWC,MWX,B,BE,BH,CA,CS,N,NE,NM,D,DA,DB,DC,DL,DO,DP,DPA,MA,MB,MR,P,PA,PAS,PB,PBC,PBO,PC,PL,PO,PS,PSA

****************************************************************************
Proc ResetPreviousWorkEvent

  Echo Reset previous WorkEvent cars

  While($Set(@jResetCarIDs, Count) <> 0)
    Let jCarID = $String(@jResetCarIDs, NextToken)
    Let jTemp = $Car(@jCarID, Track)
    Let jTemp = $Track(@jTemp, Label)
    If(@jTemp = "")
      Let jTemp = "~"
    EndIf
    Let $Car(@jCarID, Dest) = @jTemp
    Let $Car(@jCarID, ExcludeOps) = 0
  EndWhile
  View Refresh

EndProc
****************************************************************************


Proc CreateReportHeader

  Echo Find the number of WorkEvents for the manifest
  ** And extract the manifest header

  Let jManifestCopy = @jManifestAll
  Let j = 1
  Let jEventSet = ""

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** RR name
  If($String(@jTemp, StartsWith, "HN") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Railroad name not found"
  Endif

** The JMRI jPlus sub separates header items with a semi colon
  Let jHeader = ""
  While ($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + $String(@jTemp, NextToken, ";") + "\n"
  EndWhile

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train name
  If($String(@jTemp, StartsWith, "HT") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train name not found"
  Endif
  If($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + \n@jTemp
  EndIf

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train description
  If($String(@jTemp, StartsWith, "HD") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train description not found"
  Endif
  If($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + \n@jTemp
  EndIf

  * Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train comment
  * If($String(@jTemp, StartsWith, "HC") = 1)
  *  Call $String(@jTemp, NextToken)
  * Else
  *   Let jTemp = "Train comment not found"
  * Endif
  * If($String(@jTemp, Length) <> 0)
  *   Let jHeader = @jHeader + \n@jTemp
  * EndIf

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Valid time
  If($String(@jTemp, StartsWith, "HV") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train time stamp not found"
  Endif
  Let jHeader = @jHeader + \n@jTemp

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Work event total
  If($String(@jTemp, StartsWith, "WT") = 1)
    Call $String(@jTemp, NextToken)
    Let jWETotal = @jTemp
  Else
    Echo = "Total number of work events unknown"
    Let jWETotal = 0
  Endif

  Echo There are @jWETotal WorkEvents

EndProc
****************************************************************************


Proc ParseManifest ** Parse the whole manifest from JMRI

  Let PickUpCount = 0
  Let SetOutCount = 0
  Let jMText = ""
  Let jManifestCopy = @jManifestAll
  Let jWE = ""

  While($Set(@jmanifestCopy, Count) > 0)

    Let jLine = $String(@jManifestCopy, NextToken, @xCR)

    Let j1 = $String(@jLine, NextToken) ** action to be taken WE PU SO PL SL

    If(@j1 = "WE")
      Let jWE = $String(@jLine, NextToken) ** Work Event
      Let jWL = $String(@jLine, NextToken) ** Work Location
      Echo WorkEvent @jWE @jWL
      Continue
    EndIf

    If(@jWE = @jWEIndex)
      Let jWEN = @jWL
      Call ParseLine

      If(@j1 = "PC")
        Call PickUpCar
        Call LoadCar
        Call TagCar
        Let PickUpCount = @PickUpCount + 1
      EndIf
      If(@j1 = "SC")
        Call TagCar
        Call SetOutCar
        ** Call LoadCar
        Let SetOutCount = @SetOutCount + 1
      EndIf
      If(@j1 = "PL")
        Call TagCar
        Call PickUpLoco
      EndIf
      If(@j1 = "SL")
        Call TagCar
        Call SetOutLoco
      EndIf
    EndIf

  EndWhile

  Echo Current WorkEvent processed

EndProc
****************************************************************************


Proc ParseLine ** (All Cars) parse out all variables for each car in the manifest and format for switch list

  ** jNumbers are for switchlist
  ** "format:PC,25,NYC,69133,XM,L,cement,Harlem River;Car Barge,HTC;Cement House"
  ** "       j1,j2,j3 ,j4   ,j5,j6,j7   ,j8                    ,j9   "

  Let j0 = " " ** create spaces in switch list

  Let jID = $String(@jLine, NextToken)
  Let j2 = @jID + "     "
  Let j2 = $Substr(0, 2, @j2) ** truncate to 3 char

  Let jRoad = $String(@jLine, NextToken)
  Let j3 = @jRoad + "          "
  Let j3 = $Substr(0, 5, @j3) ** truncate to 6 char

  Let jNumber = $String(@jLine, NextToken)
  Let j4 = @jNumber + "          "
  Let j4 = $Substr(0, 5, @j4) ** truncate to 6 char

  Let jType = $String(@jLine, NextToken) ** Car Type
  Let j5 = @jType

  Let jLT = $String(@jLine, NextToken) ** Load Type
  Let j6 = @jLT

  Let jLoad = $String(@jLine, NextToken) ** Load
  Let j7 = @jLoad + "                    "
  Let j7 = $Substr(0, 11, @j7) ** truncate to 12 char

  Let jFromLoc = $String(@jLine, NextToken) ** From locale
  Let j8 = @jFromLoc + "                             "
  Let j8 = $Substr(0, 19, @j8) ** truncate to 20 char

  Let jToLoc = @jLine ** To locale
  Let j9 = @jToLoc + "                             "
  Let j9 = $Substr(0, 19, @j9) ** truncate to 20 char

EndProc
****************************************************************************


Proc TagCar

  Let jLocaleIndex = $Set(@jLocaleSet, Find, @jToLoc)
  Let jTag = $Set(@jTrackLabelSet, Get, @jLocaleIndex)

  Let $Car(@jID, Dest) = @jTag
  Let jResetCarIDs = $Set(@jResetCarIDs, Add, "@jID")

EndProc
****************************************************************************


Proc PickupCar ** Tag the TP car to be picked up

  ** Note adding a whitespace between variables adds a whitespace to the report, @j0 is not needed

  Let jMText = @jMText + \n$Set(@o2oSet, Get, 29) @j3 @j4 @j5 @j6 @j7 $Set(@o2oSet, Get, 14) @j8
  Let $Car(@jID, ExcludeOps) = 0 ** set the tags color

EndProc
****************************************************************************


Proc SetoutCar ** Tag the TP car to be set out

  Let jMText = @jMText + \n$Set(@o2oSet, Get, 30) @j3 @j4 @j5 @j6 @j7 $Set(@o2oSet, Get, 15) @j9
  Let $Car(@jID, ExcludeOps) = 1

EndProc
****************************************************************************


Proc PickUpLoco ** Tag the engine to be picked up

  Let jMText = @jMText + \n$Set(@o2oSet, Get, 29) @j3 @j4 @j5 @j6 @j7 $Set(@o2oSet, Get, 14) @j8
  Let $Car(@jID, ExcludeOps) = 0 ** set the tags color

EndProc
****************************************************************************


Proc SetOutLoco ** Tag the engine to be set out

  Let jMText = @jMText + \n$Set(@o2oSet, Get, 30) @j3 @j4 @j5 @j6 @j7 $Set(@o2oSet, Get, 15) @j9
  Let $Car(@jID, ExcludeOps) = 1 ** set the tags color

EndProc
****************************************************************************


Proc LoadCar

Let $Car(@jID, LoadName) = @jLoad

Let $Car(@jID, Loaded) = 1
If (@jLT = L)
  Let $Car(@jID, Loaded) = 0
EndIf


EndProc
****************************************************************************



Proc LoadCar2

  ** if using JMRI custom loads
  If(@x6 = 1)
    Let $Car(@jID, Loaded) = 1
    Let $Car(@jLabel, LoadName) = @jLoad
  EndIf

  ** If using AO loads
  If(@x6 = 0)
    Let $Car(@jID, Loaded) = 0

    ** First, try to load from current location
    Let jIndexLocs = $Ops(Find, Industries.Locale, @jFromLoc) ** set of indeces
    While($Set(@jIndexLocs, Count) <> 0)
      Let jIndex = $String(@jIndexLocs, NextToken)
      Let jAAR = $Ops(Get, Industries.AAR, @jIndex)
      If($Car(@jLabel, AAR) = @jAAR)
        Let jSR = $Ops(Get, Industries.S/R, @jIndex)
        If(@jSR = "S")
        If(@j5 = "L")
          Let $Car(@jLabel, LoadName) = $Ops(Get, Industries.Load, @jIndex)
          Let $Car(@jID, Loaded) = 1
          ** Echo Load car @jLabel with $Ops(Get, Industries.Load, @jIndex)
        EndIf
        EndIf
      EndIf
    EndWhile

    ** Second, try to load from next location
    Let jIndexLocs = $Ops(Find, Industries.Locale, @jToLoc) ** set of indeces
    While($Set(@jIndexLocs, Count) <> 0)
      Let jIndex = $String(@jIndexLocs, NextToken)
      Let jAAR = $Ops(Get, Industries.AAR, @jIndex)
      If($Car(@jLabel, AAR) = @jAAR)
        Let jSR = $Ops(Get, Industries.S/R, @jIndex)
        If(@jSR = "R")
          Let $Car(@jLabel, LoadName) = $Ops(Get, Industries.Load, @jIndex)
          Let $Car(@jID, Loaded) = 1
          ** Echo Load car @jLabel with $Ops(Get, Industries.Load, @jIndex)
        Else
          ** Let $Car(@jID, Loaded) = 0
        EndIf
      EndIf
    EndWhile

    ** Third, try to load from the cars FD
    Let jIndexLocs = $Ops(Find, Industries.Locale, @jFDLoc) ** set of indeces
    While($Set(@jIndexLocs, Count) <> 0)
      Let jIndex = $String(@jIndexLocs, NextToken)
      Let jAAR = $Ops(Get, Industries.AAR, @jIndex)
      If($Car(@jLabel, AAR) = @jAAR)
        Let jSR = $Ops(Get, Industries.S/R, @jIndex)
        If(@jSR = "R")
          Let $Car(@jLabel, LoadName) = $Ops(Get, Industries.Load, @jIndex)
          Let $Car(@jID, Loaded) = 1
          ** Echo Load car @jLabel with $Ops(Get, Industries.Load, @jIndex)
        Else
          ** Let $Car(@jID, Loaded) = 0
        EndIf
      EndIf
    EndWhile
  EndIf

EndProc
****************************************************************************


Proc ReadAoLocations

  Echo Read the AO location dataset for this layout

  Let jTemp = $Ops(Find, Locations.Locale, All) ** returns indices
  Let jLocaleSet = $Ops(Get, Locations.Locale, @jTemp) ** set of all locales
  Let jTrackLabelSet = $Ops(Find, Locations.Track, All, Track) ** set of all track labels

EndProc
****************************************************************************


Proc IncrementWE

  Call ResetPreviousWorkEvent
  Let jResetCarIDs = ""

  Call ParseManifest

  Let jNote = @jHeader \n$Set(@o2oSet, Get, 4) @jWEN \n$Set(@o2oSet, Get, 12) @jWEIndex $Set(@o2oSet, Get, 13) @jWETotal \n@jMText \n\n@PickUpCount $Set(@o2oSet, Get, 5) @SetOutCount $Set(@o2oSet, Get, 6) \n
  Call NoteWindow @jNote 1
  Let L = 1

EndProc
****************************************************************************


If (%1 = SetUp)

  Let x5 = 1
  Let x6 = 0

  Let xMatrix = @x0,@x1,@x2,@x3,@x4,@x5,@x6,@x7
  ** Call $System(MD "%homepath%\JMRI\TrainPlayer")
  Call o2oInit
  Let jResetCarIDs = ""
  Let jManifestAll = ""
  Let jLocList = "Location List,"
  Call $View(Hide, "Track Labels")
  Call $View(Show,"car ids")
  View Refresh
  If (@x6 = 0)
    Echo Using AO Industry loads
  Else
    Echo Using JMRI custom loads
  Endif

  Echo o2o @version

EndIf
****************************************************************************


If($Set(@xMatrix, Get, 0) = 1) ** quick keys turned on
If($Set(@xMatrix, Get, 5) = 1)

  If ($Key = 76) ** key l for list
    If(@jManifestAll = "") ** if manifest is not read in, set to default.
      Let jNote = \n$Set(@o2oSet, Get, 0)\n\n$Set(@o2oSet, Get, 1)\n\n$Set(@o2oSet, Get, 2) \n
    EndIf
    If (@L = 0)
      Let L = 1
      Call NoteWindow @jNote 1
    Else
      Let L = 0
      Call NoteWindow
    EndIf
    Let H = 0
    Let U = 0
    Let P = 0
  EndIf
  ****************************************************************************


  If($Key = 77) ** key m for manifest
    Let jMessage = $Set(@o2oSet, Get, 19) ** Read in jManifest
    Let jManifest = $Msgbox(YN, @jMessage)
    If (@jManifest = 0)
      Let $Key = 0
      Exit
    Endif

    ** Create a location matrix from the AO location dataset
    Call ReadAoLocations

    Let jReportManifest = $DataDir + "\Reports\JMRI Report - o2o Work Events.csv"
    Let jManifest = $File(@jReportManifest, Open)
    Let jManifestAll = $File(@jManifest, ReadAll)
    Call $File(@jReportManifest, Close)
    Call CreateReportHeader

    Let jNote = \n$Set(@o2oSet, Get, 0)\n\n$Set(@o2oSet, Get, 3) \n
    Call NoteWindow @jNote 1
    Echo Read in manifest
    Let jWEIndex = 1
    Call IncrementWE
    View Refresh
  EndIf
  ****************************************************************************


  If($Key = 33) ** Page Up key
    If(@jWEIndex = 1)
      Let jMessage = $Set(@o2oSet, Get, 17)
      Call $Msgbox(@jMessage)
    Else
      Let jNote = @jHeader \n\n$Set(@o2oSet, Get, 9)\n\n$Set(@o2oSet, Get, 11) \n
      Call NoteWindow @jNote 1
      Echo Move to previous WorkEvent
      Let jWEIndex = @jWEIndex - 1

      Call IncrementWE
      View Refresh
    EndIf
  EndIf
  ****************************************************************************


  If($Key = 34) ** Page Down key
    If(@jWEIndex = @jWETotal)
      Let jMessage = $Set(@o2oSet, Get, 18)
      Call $Msgbox(@jMessage)
    Else
      Let jNote = @jHeader \n\n$Set(@o2oSet, Get, 8)\n\n$Set(@o2oSet, Get, 11) \n
      Call NoteWindow @jNote 1
      Echo Move to next WorkEvent
      Let jWEIndex = @jWEIndex + 1

      Call IncrementWE
      Echo j work event Index @jWEIndex
      View Refresh
    EndIf
  EndIf
  ****************************************************************************


  If ($Key = 35) ** End key
    If(@jWEIndex = @jWETotal)
      Let jMessage = $Set(@o2oSet, Get, 18)
      Call $Msgbox(@jMessage)
    Else
      Let jNote = @jHeader \n\n$Set(@o2oSet, Get, 10)\n\n$Set(@o2oSet, Get, 11) \n
      Call NoteWindow @jNote 1
      Echo Move to last WorkEvent
      Let jWEIndex = @jWETotal

      Call IncrementWE
      View Refresh
    EndIf
  EndIf
  ****************************************************************************


  If ($Key = 36) ** Home key
    If(@jWEIndex = 1)
      Let jMessage = $Set(@o2oSet, Get, 17)
      Call $Msgbox(@jMessage)
    Else
      Let jNote = @jHeader \n\n$Set(@o2oSet, Get, 7)\n\n$Set(@o2oSet, Get, 11) \n
      Call NoteWindow @jNote 1
      Echo Move to first WorkEvent
      Let jWEIndex = 1

      Call IncrementWE
      View Refresh
    EndIf
  EndIf
  ****************************************************************************


EndIf
EndIf
