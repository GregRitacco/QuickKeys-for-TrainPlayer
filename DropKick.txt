** DropKick Version 3


If (%1 = SetUp)

  Let x3 = 1
  Let Uncouple Gap = 20 ** make bigger if dropped cars re-couple
  Let Min Coupling Dist = 1
  Echo DropKick Version 3
EndIf
****************************************************************************

Proc Scrubber
** Remove all the kick motors from the layout

Echo Delete the KickMotors.
Let kThisTrain = $Train
Let kKickMotors = $Ops(find,Cars.AAR,"EQDK",Car)
Let i = $Set(@kKickMotors, Count)
While ($Set(@kKickMotors, Count) <> 0)
  Let kTemp = $String(@kKickMotors, NextToken)
  Train @kTemp
  Train car @kTemp
  "Train" "Car" "Delete Car"
EndWhile
Echo @i KickMotors deleted.

Train @kThisTrain

EndProc
****************************************************************************

Proc SpeedCheck
** If the selected train is stopped, call Scrubber

If ($Train($Train, Speed) = 0)
  Let xMessage = $Set(@messageBundle, Get, 2)
  Let kCleanToggle = $MsgBox(yn, @xMessage)
  If (@kCleanToggle = 1)
    Call Scrubber
  EndIf
  Let kCleanToggle = 0
EndIf


EndProc
****************************************************************************

Proc KickCheck
** Test if selected car is an engine

Let kAar = $Car($Car, AAR)
IF ($String(@kAar, StartsWith, "E") = 1)
  Echo Can't let an engine go!
EndIf

EndProc
****************************************************************************

Proc FindEngine
** Find the engines position in the selected train

  Let kTemp = $Train($Train, CarLabels)
  Let kTrainCount = $Set(@kTemp, Count)
  
  Let i = 0
  While (@i < @kTrainCount)
    Let kTestLabel = $Set(@kTemp, Get, @i)
    Let kTestAAR = $Car(@kTestLabel, AAR)
    If ($String(@kTestAAR, StartsWith, "E") = 1)
      Let kEngineLabel = @kTestLabel
      Let E = @i ** E is position of Engine in train
      Break
    EndIf
    Let i = @i + 1
  EndWhile

EndProc
****************************************************************************

Proc FindCar
** Find the cars position in the selected train

Let i = 0
While (@i < @kTrainCount)
  let kCarLabel = $Set(@kTemp, Get, @i)
  If (@kCarLabel = $Car)
    Let C = @i ** C is position of selected Car in train
    Break
  EndIf
  Let i = @i + 1
EndWhile

EndProc
****************************************************************************

Proc CutOffCars

Train "Add Car" "diesel"
Let $Car($Car, ShowLabel) = 0
** Let $Car($Car, Dest) = "~"
Let $Car($Car, Label) = "."
Train Car $Set(@kTemp, Get, @kCarPos)
train "uncouple"

EndProc
****************************************************************************

Proc DropKickKick

  Let x3 = 2
  Call SpeedCheck
  Call KickCheck
  * Call FindEngine
  Call FindCar

  If (@C - @E < 0) ** Engine behind Car
  If ($Train($Train, Direction) = F)
    Echo Kick 'Em!
    Let kCarPos = @C + 1
    Call CutOffCars
  Else
    Echo Wrong direction to kick.
  Endif
  EndIf

  If (@C - @E > 0) ** Car behind Engine
  If ($Train($Train, Direction) = R)
    Echo Kick 'Em!
    Let kCarPos = @C - 1
    Call CutOffCars
  Else
    Echo Wrong direction to kick.
  Endif
  EndIf

  Train @kEngineLabel
  Let x3 = 1

EndProc
****************************************************************************

Proc DropKickDrop

    Let x3 = 2
    Call SpeedCheck
    Call KickCheck
    * Call FindEngine
    Call FindCar

    Let dropSpeed = $Train($Train, Speed) - 1
    Let dropCar = $Car

    If (@C - @E < 0) ** Engine behind Car
    If ($Train($Train, Direction) = R)
      Echo Let 'Em Go!
      Let kCarPos = @C + 1
      Call CutOffCars
    Else
      Echo Wrong direction to drop.
    EndIf
    EndIf

    If (@C - @E > 0) ** Car behind Engine
    If ($Train($Train, Direction) = F)
      Echo Let 'Em Go!
      Let kCarPos = @C - 1
      Call CutOffCars
    Else
      Echo Wrong direction to drop.
    EndIf
    EndIf

    Let $Train(@dropCar, Speed) = @dropSpeed
    Let x3 = 1

EndProc
****************************************************************************
